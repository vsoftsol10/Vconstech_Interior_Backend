generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String              @id @default(uuid())
  name               String
  email              String              @unique
  password           String
  companyId          String?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  role               String
  uploadedFiles      File[]
  materialUsages     MaterialUsage[]
  projectAssignments ProjectAssignment[]
  company            Company?            @relation(fields: [companyId], references: [id])
}

model Project {
  id           Int                    @id @default(autoincrement())
  name         String
  description  String?
  companyId    String
  startDate    DateTime?
  endDate      DateTime?
  status       ProjectStatus          @default(ONGOING)
  createdAt    DateTime               @default(now())
  budget       Float?
  clientName   String
  projectId    String                 @unique
  projectType  String
  contracts    Contract[]
  files        File[]
  finances     FinancialTransaction[]
  materialUsed MaterialUsage[]
  company      Company                @relation(fields: [companyId], references: [id], onDelete: Cascade)
  assignments  ProjectAssignment[]

  @@index([companyId])
  @@index([projectId])
  @@index([status])
}

model ProjectAssignment {
  id         Int      @id @default(autoincrement())
  projectId  Int
  userId     String
  assignedAt DateTime @default(now())
  project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
  @@index([projectId])
  @@index([userId])
}

model Material {
  id        Int             @id @default(autoincrement())
  name      String
  type      String
  unit      String
  companyId String
  createdAt DateTime        @default(now())
  company   Company         @relation(fields: [companyId], references: [id], onDelete: Cascade)
  usage     MaterialUsage[]

  @@index([companyId])
}

model MaterialUsage {
  id         Int      @id @default(autoincrement())
  materialId Int
  projectId  Int
  userId     String
  quantity   Float
  date       DateTime @default(now())
  material   Material @relation(fields: [materialId], references: [id], onDelete: Cascade)
  project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([materialId])
  @@index([userId])
  @@index([date])
}

model Contract {
  id             Int      @id @default(autoincrement())
  projectId      Int
  contractorName String
  details        String?
  startDate      DateTime
  endDate        DateTime
  createdAt      DateTime @default(now())
  project        Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
}

model FinancialTransaction {
  id          Int             @id @default(autoincrement())
  projectId   Int
  type        TransactionType
  amount      Float
  description String?
  date        DateTime        @default(now())
  project     Project         @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([type])
  @@index([date])
}

model File {
  id         Int      @id @default(autoincrement())
  projectId  Int
  uploadedBy String
  fileUrl    String
  fileName   String?
  uploadedAt DateTime @default(now())
  project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [uploadedBy], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([uploadedBy])
}

model Company {
  id        String     @id @default(uuid())
  name      String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  materials Material[]
  projects  Project[]
  users     User[]
  engineers Engineer[]

  @@map("companies")
}

model Engineer {
  id             Int      @id @default(autoincrement())
  name           String
  empId          String
  phone          String
  alternatePhone String?
  address        String
  profileImage   String?
  companyId      String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  company        Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([empId, companyId])
  @@index([companyId])
  @@map("engineers")
}

enum Role {
  Admin
  Site_Engineer
}

enum ProjectStatus {
  PENDING
  ONGOING
  COMPLETED
}

enum TransactionType {
  INCOME
  EXPENSE
  BUDGET
}
